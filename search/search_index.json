{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Permission Boundaries: How to Truly Delegate Permissions on AWS (Build Phase) As your organization grows the ability to delegate permission management to trusted employees becomes important to scaling successfully. Permission boundaries addresses a longstanding customer issue, namely, how do I delegate administration to my users. If you need to assign your system administrators the ability to create IAM roles and users, developers that need to be able to create roles for Lambda functions, or any similar scenario, in a controlled manner then you need permission boundaries. Scenario As the administrator for an AWS account hosting multiple production applications, you've been tasked with creating a new administrator role to delegate some of your responsibilities. This new role will be responsible for doing all the administration on the resources for the Ares Mission . The diagram above showcases the two applications currently being hosted in the AWS account and their associated resources. Currently there is one application but additional applications are planned. The new role should account for current and future Ares Mission applications to reduce your overhead and friction with the web administrators. The web administrators for the Ares Mission should have permissions to create and administer resources related to that mission. This means they should be able to: Create, modify, and delete IAM policies and roles. Any role created must have restricted permissions to ensure a web administrator cannot elevate their privileges or the privileges of the application. Create, modify, and delete Ares Mission Lambda functions. The web administrators should not be able to impact any resources in the account that are not part of the Ares Mission application including users, groups, roles, S3 buckets, EC2 instances, etc. In this case, they should not be able to modify resources of the Rover Mission.","title":"Overview"},{"location":"#permission-boundaries-how-to-truly-delegate-permissions-on-aws-build-phase","text":"As your organization grows the ability to delegate permission management to trusted employees becomes important to scaling successfully. Permission boundaries addresses a longstanding customer issue, namely, how do I delegate administration to my users. If you need to assign your system administrators the ability to create IAM roles and users, developers that need to be able to create roles for Lambda functions, or any similar scenario, in a controlled manner then you need permission boundaries.","title":"Permission Boundaries: How to Truly Delegate Permissions on AWS (Build Phase)"},{"location":"#scenario","text":"As the administrator for an AWS account hosting multiple production applications, you've been tasked with creating a new administrator role to delegate some of your responsibilities. This new role will be responsible for doing all the administration on the resources for the Ares Mission . The diagram above showcases the two applications currently being hosted in the AWS account and their associated resources. Currently there is one application but additional applications are planned. The new role should account for current and future Ares Mission applications to reduce your overhead and friction with the web administrators. The web administrators for the Ares Mission should have permissions to create and administer resources related to that mission. This means they should be able to: Create, modify, and delete IAM policies and roles. Any role created must have restricted permissions to ensure a web administrator cannot elevate their privileges or the privileges of the application. Create, modify, and delete Ares Mission Lambda functions. The web administrators should not be able to impact any resources in the account that are not part of the Ares Mission application including users, groups, roles, S3 buckets, EC2 instances, etc. In this case, they should not be able to modify resources of the Rover Mission.","title":"Scenario"},{"location":"01-build/","text":"Environment Setup To setup your environment please expand one of the following dropdown sections (depending on how you're doing this builder session) and follow the instructions: Click here if you're at an AWS event where the Event Engine is being used Step 1 : Open the AWS Console Navigate to the Event Engine dashboard Enter your team hash code. Click AWS Console . The CloudFormation template for this round has already been prerun. Click here if you're running this individually in your own AWS Account Launch the CloudFormation stack below to setup the Permission Boundary environment: Region Deploy US West 2 (Oregon) Click the Deploy to AWS button above. This will automatically take you to the console to run the template. Click Next on the Specify Template , Specify Details, and Options** sections. Finally, acknowledge that the template will create IAM roles under Capabilities and click Create**. This will bring you back to the CloudFormation console. You can refresh the page to see the stack starting to create. Before moving on, make sure the stack is in a CREATE_COMPLETE . All resources are located in the us-west-2 region. Task 1 - Create a permission boundary for Lambda Functions ACTION : Create a new IAM policy that will act as the permission boundary for the web admins. Name the policy identity-ex-permissionboundary-ares-lambda Hint : Friendly Names and Paths . Replace the ACCOUNT_ID with your account ID and the ' ' with a friendly name that can be used as a resource restriction. { Version : 2012-10-17 , Statement : [ { Sid : CreateLogGroup , Effect : Allow , Action : logs:CreateLogGroup , Resource : arn:aws:logs:us-west-2:ACCOUNT_ID:* }, { Sid : CreateLogStreamandEvents , Effect : Allow , Action : [ logs:CreateLogStream , logs:PutLogEvents ], Resource : arn:aws:logs:us-west-2:ACCOUNT_ID:log-group:/aws/lambda/identity-ex- :* }, { Sid : AllowedS3GetObject , Effect : Allow , Action : [ s3:List* ], Resource : arn:aws:s3:::identity-ex- } ] } Task 2 - Create a permission policy for the Web Admin ACTION : Create the permission policy that will be attached to the webadmin AWS IAM user. Name the new policy identity-ex-webadmin-permissionpolicy . Hint : Friendly Names and Paths . Replace the ACCOUNT_ID with your account ID and the ' ' with a friendly name that can be used as a resource restriction. { Version : 2012-10-17 , Statement : [ { Sid : CreateCustomerManagedPolicies , Effect : Allow , Action : [ iam:CreatePolicy , iam:DeletePolicy , iam:CreatePolicyVersion , iam:DeletePolicyVersion , iam:SetDefaultPolicyVersion ], Resource : arn:aws:iam::ACCOUNT_ID:policy/identity-ex- }, { Sid : RoleandPolicyActionswithnoPermissionBoundarySupport , Effect : Allow , Action : [ iam:UpdateRole , iam:DeleteRole ], Resource : [ arn:aws:iam::ACCOUNT_ID:role/identity-ex- ] }, { Sid : CreateRoles , Effect : Allow , Action : [ iam:CreateRole , iam:AttachRolePolicy , iam:DetachRolePolicy ], Resource : [ arn:aws:iam::ACCOUNT_ID:role/identity-ex- ], Condition : { StringEquals : { iam:PermissionsBoundary : arn:aws:iam::ACCOUNT_ID:policy/identity-ex-permissionboundary-ares-lambda } } }, { Sid : LambdaFullAccesswithResourceRestrictions , Effect : Allow , Action : lambda:* , Resource : arn:aws:lambda:us-west-2:ACCOUNT_ID:function:identity-ex- }, { Sid : PassRoletoLambda , Effect : Allow , Action : iam:PassRole , Resource : arn:aws:iam::ACCOUNT_ID:role/identity-ex- , Condition : { StringLikeIfExists : { iam:PassedToService : lambda.amazonaws.com } } }, { Sid : AdditionalPermissionsforLambda , Effect : Allow , Action : [ kms:ListAliases , logs:Describe* , logs:ListTagsLogGroup , logs:FilterLogEvents , logs:GetLogEvents ], Resource : * }, { Sid : DenyPermissionBoundaryandPolicyDeleteModify , Effect : Deny , Action : [ iam:CreatePolicyVersion , iam:DeletePolicy , iam:DeletePolicyVersion , iam:SetDefaultPolicyVersion ], Resource : [ arn:aws:iam::ACCOUNT_ID:policy/identity-ex-permissionboundary-ares-lambda , arn:aws:iam::ACCOUNT_ID:policy/identity-ex-webadmin-permissionpolicy ] }, { Sid : DenyRolePermissionBoundaryDelete , Effect : Deny , Action : iam:DeleteRolePermissionsBoundary , Resource : * } ] } Task 3 - Create the Web Admin user ACTION : Create an IAM User and name it webadmin . The user will need console access so give it a password. Attach the identity-ex-webadmin-permissionpolicy , IAMReadOnlyAccess AWSLambdaReadOnlyAccess policies to the IAM user. When you are done the webadmin user should have three policies attached: identity-ex-webadmin-permissionpolicy, IAMReadOnlyAccess AWSLambdaReadOnlyAccess. Task 4 - Gather info needed for the Verify phase ACTION : Now that you have setup the IAM user for the web admins, it's time to pass this information on to the next team who will work through the VERIFY tasks. You need to gather some details about your IAM user and then hand this info to the next team. Copy the IAM users sign-in link , the IAM user name (if you used a name other then webadmin ) and the password you used. You will also need the resource restriction that you used in your policies and the name you used for the permission policy and permission boundary (if you used names other than the ones recommended above) Here are all of the details you need to pass to another team: IAM users sign-in link: IAM user name: IAM user password: Resource restriction identifier: Permission boundary name: (recommended name: identity-ex-permissionboundary-ares-lambda ) Permission policy: (recommended name: identity-ex-webadmin-permissionpolicy ) Enter this information into the VERIFY phase form and exchange forms with another team so you both can work through the tasks. You can now move on to the Verify phase!","title":"Module 1: Environment Build"},{"location":"01-build/#environment-setup","text":"To setup your environment please expand one of the following dropdown sections (depending on how you're doing this builder session) and follow the instructions: Click here if you're at an AWS event where the Event Engine is being used Step 1 : Open the AWS Console Navigate to the Event Engine dashboard Enter your team hash code. Click AWS Console . The CloudFormation template for this round has already been prerun. Click here if you're running this individually in your own AWS Account Launch the CloudFormation stack below to setup the Permission Boundary environment: Region Deploy US West 2 (Oregon) Click the Deploy to AWS button above. This will automatically take you to the console to run the template. Click Next on the Specify Template , Specify Details, and Options** sections. Finally, acknowledge that the template will create IAM roles under Capabilities and click Create**. This will bring you back to the CloudFormation console. You can refresh the page to see the stack starting to create. Before moving on, make sure the stack is in a CREATE_COMPLETE . All resources are located in the us-west-2 region.","title":"Environment Setup"},{"location":"01-build/#task-1-create-a-permission-boundary-for-lambda-functions","text":"ACTION : Create a new IAM policy that will act as the permission boundary for the web admins. Name the policy identity-ex-permissionboundary-ares-lambda Hint : Friendly Names and Paths . Replace the ACCOUNT_ID with your account ID and the ' ' with a friendly name that can be used as a resource restriction. { Version : 2012-10-17 , Statement : [ { Sid : CreateLogGroup , Effect : Allow , Action : logs:CreateLogGroup , Resource : arn:aws:logs:us-west-2:ACCOUNT_ID:* }, { Sid : CreateLogStreamandEvents , Effect : Allow , Action : [ logs:CreateLogStream , logs:PutLogEvents ], Resource : arn:aws:logs:us-west-2:ACCOUNT_ID:log-group:/aws/lambda/identity-ex- :* }, { Sid : AllowedS3GetObject , Effect : Allow , Action : [ s3:List* ], Resource : arn:aws:s3:::identity-ex- } ] }","title":"Task 1 - Create a permission boundary for Lambda Functions"},{"location":"01-build/#task-2-create-a-permission-policy-for-the-web-admin","text":"ACTION : Create the permission policy that will be attached to the webadmin AWS IAM user. Name the new policy identity-ex-webadmin-permissionpolicy . Hint : Friendly Names and Paths . Replace the ACCOUNT_ID with your account ID and the ' ' with a friendly name that can be used as a resource restriction. { Version : 2012-10-17 , Statement : [ { Sid : CreateCustomerManagedPolicies , Effect : Allow , Action : [ iam:CreatePolicy , iam:DeletePolicy , iam:CreatePolicyVersion , iam:DeletePolicyVersion , iam:SetDefaultPolicyVersion ], Resource : arn:aws:iam::ACCOUNT_ID:policy/identity-ex- }, { Sid : RoleandPolicyActionswithnoPermissionBoundarySupport , Effect : Allow , Action : [ iam:UpdateRole , iam:DeleteRole ], Resource : [ arn:aws:iam::ACCOUNT_ID:role/identity-ex- ] }, { Sid : CreateRoles , Effect : Allow , Action : [ iam:CreateRole , iam:AttachRolePolicy , iam:DetachRolePolicy ], Resource : [ arn:aws:iam::ACCOUNT_ID:role/identity-ex- ], Condition : { StringEquals : { iam:PermissionsBoundary : arn:aws:iam::ACCOUNT_ID:policy/identity-ex-permissionboundary-ares-lambda } } }, { Sid : LambdaFullAccesswithResourceRestrictions , Effect : Allow , Action : lambda:* , Resource : arn:aws:lambda:us-west-2:ACCOUNT_ID:function:identity-ex- }, { Sid : PassRoletoLambda , Effect : Allow , Action : iam:PassRole , Resource : arn:aws:iam::ACCOUNT_ID:role/identity-ex- , Condition : { StringLikeIfExists : { iam:PassedToService : lambda.amazonaws.com } } }, { Sid : AdditionalPermissionsforLambda , Effect : Allow , Action : [ kms:ListAliases , logs:Describe* , logs:ListTagsLogGroup , logs:FilterLogEvents , logs:GetLogEvents ], Resource : * }, { Sid : DenyPermissionBoundaryandPolicyDeleteModify , Effect : Deny , Action : [ iam:CreatePolicyVersion , iam:DeletePolicy , iam:DeletePolicyVersion , iam:SetDefaultPolicyVersion ], Resource : [ arn:aws:iam::ACCOUNT_ID:policy/identity-ex-permissionboundary-ares-lambda , arn:aws:iam::ACCOUNT_ID:policy/identity-ex-webadmin-permissionpolicy ] }, { Sid : DenyRolePermissionBoundaryDelete , Effect : Deny , Action : iam:DeleteRolePermissionsBoundary , Resource : * } ] }","title":"Task 2 - Create a permission policy for the Web Admin"},{"location":"01-build/#task-3-create-the-web-admin-user","text":"ACTION : Create an IAM User and name it webadmin . The user will need console access so give it a password. Attach the identity-ex-webadmin-permissionpolicy , IAMReadOnlyAccess AWSLambdaReadOnlyAccess policies to the IAM user. When you are done the webadmin user should have three policies attached: identity-ex-webadmin-permissionpolicy, IAMReadOnlyAccess AWSLambdaReadOnlyAccess.","title":"Task 3 - Create the Web Admin user"},{"location":"01-build/#task-4-gather-info-needed-for-the-verify-phase","text":"ACTION : Now that you have setup the IAM user for the web admins, it's time to pass this information on to the next team who will work through the VERIFY tasks. You need to gather some details about your IAM user and then hand this info to the next team. Copy the IAM users sign-in link , the IAM user name (if you used a name other then webadmin ) and the password you used. You will also need the resource restriction that you used in your policies and the name you used for the permission policy and permission boundary (if you used names other than the ones recommended above) Here are all of the details you need to pass to another team: IAM users sign-in link: IAM user name: IAM user password: Resource restriction identifier: Permission boundary name: (recommended name: identity-ex-permissionboundary-ares-lambda ) Permission policy: (recommended name: identity-ex-webadmin-permissionpolicy ) Enter this information into the VERIFY phase form and exchange forms with another team so you both can work through the tasks. You can now move on to the Verify phase!","title":"Task 4 - Gather info needed for the Verify phase"},{"location":"02-verify/","text":"Permission Boundaries: How to Truly Delegate Permissions on AWS (Verify Phase) We are now in the Verify phase. It is time to put on the hat of the web administrator and test the access to ensure the permissions are setup correctly. You'll be logging in to the AWS account you were delegated access to and perform a number of verification tasks. Console Login You should have received from another team the following information. You will need this information to access the AWS console IAM users sign-in link IAM user name IAM user password Resource restriction identifier Permission boundary name Requirements The only requirement is to verify you can complete the following tasks. The web admins should only have access to the following resources: IAM policies and roles created by the web admins Lambda functions created by the web admins The web admins should not be able to impact any resources in the account that they do not own including users, groups, roles, S3 buckets, EC2 instances, etc. The following steps should be taken to validate that the delegation was done properly. Verify that you are able to create an IAM policy, create an IAM role with that policy attached and then create a Lambda function and pass that role to it. Task 1 - Create a customer managed IAM policy The first step is to create a customer managed IAM policy. This will define the permissions of the role that you will pass to a Lambda function. Since the function will be working with S3 and since the point of this is to show how permission boundaries work, use the following policy which grants basic Lambda logging permissions and S3 full access. Keep in mind the resource restrictions put in place which will require you to use a certain name for the policy. What is the resource restriction identifier that was given to you? { Version : 2012-10-17 , Statement : [ { Effect : Allow , Action : [ logs:CreateLogGroup , logs:CreateLogStream , logs:PutLogEvents , s3:* ], Resource : * } ] } Task 2 - Create an IAM role Next you will create an IAM Role. Choose Lambda as the service for this role. Attach the policy you just created and the permission boundary (which will most likely be named: identity-ex-permissionboundary-ares-lambda ) Keep in mind the resource restrictions put in place which will require you to use a certain name for the role. What is the resource restriction identifier that was given to you? Task 3 - Create a Lambda function Finally you will create a Node.js 8.10 Lambda function using the code below and attach the IAM role you just created to it. You will need to replace \"ELB_ACCESS_LOGS_BUCKET_NAME\" with bucket from your account that begins with \"identity-ex-ares*\" . Keep in mind the resource restrictions put in place which will require you to use a certain name for the role. What is the resource restriction identifier that was given to you? const AWS = require ( aws-sdk ) ; const s3 = new AWS . S3 () ; exports . handler = async ( event ) = { console . log ( Loading function ) ; const allKeys = [] ; await getKeys ( { Bucket : ELB_ACCESS_LOGS_BUCKET_NAME }, allKeys ) ; return allKeys ; } ; async function getKeys ( params , keys ) { const response = await s3 . listObjectsV2 ( params ) . promise () ; response . Contents . forEach ( obj = keys . push ( obj . Key )) ; if ( response . IsTruncated ) { const newParams = Object . assign ( {}, params ) ; newParams . ContinuationToken = response . NextContinuationToken ; await getKeys ( newParams , keys ) ; } } Test the Lambda function and make sure it is generating logs in CloudWatch logs and that it is able to list the ELB logs in the ELB access logs bucket the object in S3. In order to test you will need to create a test event. The parameters of the test do not matter. Cleanup In order to prevent charges to your account we recommend cleaning up the infrastructure that was created. Expand one of the following dropdowns and follow the instructions: AWS Sponsored Event No cleanup required! The responsibility falls to AWS. Individual You will need to manually delete some resources before you delete the CloudFormation stacks so please do the following steps in order. Delete the Ares S3 bucket. Go to the Amazon S3 console. Click on the bucket named identity-ex-ares-app Click Delete Enter the bucket name again to confirm and click Delete . Delete the CloudFormation stack ( Identity-PB-Builder-Session ). Go to the AWS CloudFormation console. Select the appropriate stack. Select Action . Click Delete Stack . Summary Congratulations, you've completed the Permission Boundaries Builder session! Hopefully by going through this session you have a better idea of what permission boundaries are, where they can be used, and are starting to think about where you can apply them in your environments.","title":"Module 2: Verify Stage"},{"location":"02-verify/#permission-boundaries-how-to-truly-delegate-permissions-on-aws-verify-phase","text":"We are now in the Verify phase. It is time to put on the hat of the web administrator and test the access to ensure the permissions are setup correctly. You'll be logging in to the AWS account you were delegated access to and perform a number of verification tasks.","title":"Permission Boundaries: How to Truly Delegate Permissions on AWS (Verify Phase)"},{"location":"02-verify/#console-login","text":"You should have received from another team the following information. You will need this information to access the AWS console IAM users sign-in link IAM user name IAM user password Resource restriction identifier Permission boundary name","title":"Console Login"},{"location":"02-verify/#requirements","text":"The only requirement is to verify you can complete the following tasks. The web admins should only have access to the following resources: IAM policies and roles created by the web admins Lambda functions created by the web admins The web admins should not be able to impact any resources in the account that they do not own including users, groups, roles, S3 buckets, EC2 instances, etc. The following steps should be taken to validate that the delegation was done properly. Verify that you are able to create an IAM policy, create an IAM role with that policy attached and then create a Lambda function and pass that role to it.","title":"Requirements"},{"location":"02-verify/#task-1-create-a-customer-managed-iam-policy","text":"The first step is to create a customer managed IAM policy. This will define the permissions of the role that you will pass to a Lambda function. Since the function will be working with S3 and since the point of this is to show how permission boundaries work, use the following policy which grants basic Lambda logging permissions and S3 full access. Keep in mind the resource restrictions put in place which will require you to use a certain name for the policy. What is the resource restriction identifier that was given to you? { Version : 2012-10-17 , Statement : [ { Effect : Allow , Action : [ logs:CreateLogGroup , logs:CreateLogStream , logs:PutLogEvents , s3:* ], Resource : * } ] }","title":"Task 1 - Create a customer managed IAM policy"},{"location":"02-verify/#task-2-create-an-iam-role","text":"Next you will create an IAM Role. Choose Lambda as the service for this role. Attach the policy you just created and the permission boundary (which will most likely be named: identity-ex-permissionboundary-ares-lambda ) Keep in mind the resource restrictions put in place which will require you to use a certain name for the role. What is the resource restriction identifier that was given to you?","title":"Task 2 - Create an IAM role"},{"location":"02-verify/#task-3-create-a-lambda-function","text":"Finally you will create a Node.js 8.10 Lambda function using the code below and attach the IAM role you just created to it. You will need to replace \"ELB_ACCESS_LOGS_BUCKET_NAME\" with bucket from your account that begins with \"identity-ex-ares*\" . Keep in mind the resource restrictions put in place which will require you to use a certain name for the role. What is the resource restriction identifier that was given to you? const AWS = require ( aws-sdk ) ; const s3 = new AWS . S3 () ; exports . handler = async ( event ) = { console . log ( Loading function ) ; const allKeys = [] ; await getKeys ( { Bucket : ELB_ACCESS_LOGS_BUCKET_NAME }, allKeys ) ; return allKeys ; } ; async function getKeys ( params , keys ) { const response = await s3 . listObjectsV2 ( params ) . promise () ; response . Contents . forEach ( obj = keys . push ( obj . Key )) ; if ( response . IsTruncated ) { const newParams = Object . assign ( {}, params ) ; newParams . ContinuationToken = response . NextContinuationToken ; await getKeys ( newParams , keys ) ; } } Test the Lambda function and make sure it is generating logs in CloudWatch logs and that it is able to list the ELB logs in the ELB access logs bucket the object in S3. In order to test you will need to create a test event. The parameters of the test do not matter.","title":"Task 3 - Create a Lambda function"},{"location":"02-verify/#cleanup","text":"In order to prevent charges to your account we recommend cleaning up the infrastructure that was created. Expand one of the following dropdowns and follow the instructions: AWS Sponsored Event No cleanup required! The responsibility falls to AWS. Individual You will need to manually delete some resources before you delete the CloudFormation stacks so please do the following steps in order. Delete the Ares S3 bucket. Go to the Amazon S3 console. Click on the bucket named identity-ex-ares-app Click Delete Enter the bucket name again to confirm and click Delete . Delete the CloudFormation stack ( Identity-PB-Builder-Session ). Go to the AWS CloudFormation console. Select the appropriate stack. Select Action . Click Delete Stack .","title":"Cleanup"},{"location":"02-verify/#summary","text":"Congratulations, you've completed the Permission Boundaries Builder session! Hopefully by going through this session you have a better idea of what permission boundaries are, where they can be used, and are starting to think about where you can apply them in your environments.","title":"Summary"},{"location":"contribute/","text":"Contributing Guidelines Thank you for your interest in contributing to our project. Whether it's a bug report, new feature, correction, or additional documentation, we greatly value feedback and contributions from our community. Please read through this document before submitting any issues or pull requests to ensure we have all the necessary information to effectively respond to your bug report or contribution. Reporting Bugs/Feature Requests We welcome you to use the GitHub issue tracker to report bugs or suggest features. When filing an issue, please check existing open , or recently closed , issues to make sure somebody else hasn't already reported the issue. Please try to include as much information as you can. Details like these are incredibly useful: A reproducible test case or series of steps The version of our code being used Any modifications you've made relevant to the bug Anything unusual about your environment or deployment Contributing via Pull Requests Contributions via pull requests are much appreciated. Before sending us a pull request, please ensure that: You are working against the latest source on the master branch. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already. You open an issue to discuss any significant work - we would hate for your time to be wasted. To send us a pull request, please: Fork the repository. Modify the source; please focus on the specific change you are contributing. If you also reformat all the code, it will be hard for us to focus on your change. Ensure local tests pass. Commit to your fork using clear commit messages. Send us a pull request, answering any default questions in the pull request interface. Pay attention to any automated CI failures reported in the pull request, and stay involved in the conversation. GitHub provides additional document on forking a repository and creating a pull request . Finding contributions to work on Looking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any 'help wanted' issues is a great place to start. Code of Conduct This project has adopted the Amazon Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opensource-codeofconduct@amazon.com with any additional questions or comments. Security issue notifications If you discover a potential security issue in this project we ask that you notify AWS/Amazon Security via our vulnerability reporting page . Please do not create a public github issue. Licensing See the LICENSE file for our project's licensing. We will ask you to confirm the licensing of your contribution. We may ask you to sign a Contributor License Agreement (CLA) for larger changes.","title":"Contributing"},{"location":"contribute/#contributing-guidelines","text":"Thank you for your interest in contributing to our project. Whether it's a bug report, new feature, correction, or additional documentation, we greatly value feedback and contributions from our community. Please read through this document before submitting any issues or pull requests to ensure we have all the necessary information to effectively respond to your bug report or contribution.","title":"Contributing Guidelines"},{"location":"contribute/#reporting-bugsfeature-requests","text":"We welcome you to use the GitHub issue tracker to report bugs or suggest features. When filing an issue, please check existing open , or recently closed , issues to make sure somebody else hasn't already reported the issue. Please try to include as much information as you can. Details like these are incredibly useful: A reproducible test case or series of steps The version of our code being used Any modifications you've made relevant to the bug Anything unusual about your environment or deployment","title":"Reporting Bugs/Feature Requests"},{"location":"contribute/#contributing-via-pull-requests","text":"Contributions via pull requests are much appreciated. Before sending us a pull request, please ensure that: You are working against the latest source on the master branch. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already. You open an issue to discuss any significant work - we would hate for your time to be wasted. To send us a pull request, please: Fork the repository. Modify the source; please focus on the specific change you are contributing. If you also reformat all the code, it will be hard for us to focus on your change. Ensure local tests pass. Commit to your fork using clear commit messages. Send us a pull request, answering any default questions in the pull request interface. Pay attention to any automated CI failures reported in the pull request, and stay involved in the conversation. GitHub provides additional document on forking a repository and creating a pull request .","title":"Contributing via Pull Requests"},{"location":"contribute/#finding-contributions-to-work-on","text":"Looking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any 'help wanted' issues is a great place to start.","title":"Finding contributions to work on"},{"location":"contribute/#code-of-conduct","text":"This project has adopted the Amazon Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opensource-codeofconduct@amazon.com with any additional questions or comments.","title":"Code of Conduct"},{"location":"contribute/#security-issue-notifications","text":"If you discover a potential security issue in this project we ask that you notify AWS/Amazon Security via our vulnerability reporting page . Please do not create a public github issue.","title":"Security issue notifications"},{"location":"contribute/#licensing","text":"See the LICENSE file for our project's licensing. We will ask you to confirm the licensing of your contribution. We may ask you to sign a Contributor License Agreement (CLA) for larger changes.","title":"Licensing"},{"location":"license/","text":"License MIT License Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#license","text":"MIT License Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"}]}